Introduction to Numpy: 
-----------------
Numpy package that contains several classes,functions or variables. etc. to deal with 
scientific calculations in python. Numpy is useful to create and also process single and 
multidimensional arrays.

An array is an object that store a group of elements of same data type.

It means we can store only integer or only float but not one integer and one is float.


To work with numpy we should import numpy module.

import numpy 
arr = numpy.array([10,20,30])
print(arr)

output: 
array([10, 20, 30])

import numpy as np
arr = np.array([10,20,30])
print(arr)
output: 
array([10, 20, 30])


from numpy import *
arr = array([10,20,30])
print(arr)

output: 
[10, 20, 30]


Creating array can be done in several ways.

1. Using array() function
2. Using linspace() function
3. Using logspace() function
4. Using arange() function
5. Using zeros() and onces() function


1. Using array() function


>>> arr = array([10,20,30],int)
>>> type(arr)
<class 'numpy.ndarray'>
>>> arr
array([10, 20, 30])
>>> arr = array([10.4,20.3,30.5],int)
>>> arr
array([10, 20, 30])
>>> arr = array([10.4,20.3,30.5],float)
>>> arr
array([10.4, 20.3, 30.5])
>>> arr = array([10.4,20.3,30.5])
>>> arr
array([10.4, 20.3, 30.5])
     
>>> arr = array([10,20.3,30])
>>> arr
array([10. , 20.3, 30. ])

For string no need to specify data type

>>> arr = array(['a','b','c'])
>>> print(arr)
['a' 'b' 'c']
>>> arr[0]
'a'

Also we can create any array from other array.

>>> a = array([1,2,3,4])
>>> a
array([1, 2, 3, 4])
>>> b = array(a)
>>> b
array([1, 2, 3, 4])
>>> c = b
>>> c
array([1, 2, 3, 4])
>>>

2. crating array using linspace

The linspace() is used to create an array with  spaced points 
between starting point and ending point. The form of linspace() function is:

linspace(start,stop,n)

Here 'n' denotes no.of parts.

>>>
>>> from numpy import *
>>> a = linspace(0,10,5)
>>> a
array([ 0. ,  2.5,  5. ,  7.5, 10. ])

3. Creating array using logspace:

logspace(start,stop,n)

The logspace() function starts at a a value which is 10 power of starting and 10 power of ending.

>>> a = logspace(1,4,5)
>>> a
array([   10.        ,    56.23413252,   316.22776602,  1778.27941004,
       10000.        ])


4. creating array using arange() : 

arange(start,stop,steppoint)

>>> from numpy import *
>>> a = arange(2,11,2)
>>> a
array([ 2,  4,  6,  8, 10])

5. creating array using zeros() and ones() function.

zeros(n,datatype) --> create array with all zeros
ones(n,datatype) --> creat array with all 1's.

>>> from numpy import *
>>> a = zeros(5,int)
>>> a
array([0, 0, 0, 0, 0])
>>> b = ones(5,int)
>>> b
array([1, 1, 1, 1, 1])
>>>

mathematical operations on arrays:
----------------------------------

>>> arr = np.array([1,2,3,4,5])
>>> arr1 = arr + 5
>>> arr1
array([ 6,  7,  8,  9, 10])
>>> arr2 = arr1 + 5
>>> arr2
array([11, 12, 13, 14, 15])
>>> arr3 = arr2 - arr1
>>> arr3
array([5, 5, 5, 5, 5])

sin(arr)
cos(arr)
tan(arr)
arcsin(arr)- sin inverse
arcos(arr) - cos inverse
arctan(arr)
log(arr) - logerthemic value
sum(arr)
prod(arr)
min(arr)
max(arr)
mean(arr)
median(arr)
var(arr)
std(arr)
unique(arr)
sort(arr)

>>>
>>> arr1
array([ 6,  7,  8,  9, 10])
>>> min(arr1)
6
>>> max(arr1)
10
>>> sum(arr1)
40

comparision arrays:
------------------

>>> from numpy import *
>>> a = array([1,2,3,4])
>>> b = array([0,2,2,4])
>>> c = a == b
>>> c
array([False,  True, False,  True])
>>>
>>> d = a>b
>>> d
array([ True, False,  True, False])

>>> print("check if any one element is true",any(d))
check if any one element is true True

>>> print("check if any one element is true",all(d))
check if any one element is true False


using where class:
-----------------

array = where(condition,expression1,expression2)

>>> a = array([10,21,30,41,50])
>>> c = where(a%2==0,a,0)
>>> c
array([10,  0, 30,  0, 50])

>>> a = array([10,20,30,40,50])
>>> b = array([1,21,3,40,51])
>>> c = where(a>b,a,b)
>>> c
array([10, 21, 30, 40, 51])


>> Python program to retrieve non zero elements of an array.

from numpy import *

a = array([1,0,0,2,-4,9,1,1,0])

c = nonzero(a)

print(c)

for i in c:
	print(i)
	
for i in c:
	print(a[i])

	
output : 
---------
(array([0, 3, 4, 5, 6, 7], dtype=int32),)
[0 3 4 5 6 7]
[ 1  2 -4  9  1  1]

Aliasing array :
-----------
= -> alias will share same memory location.
view() --> share same values but different memory location.
			if you change in one array another array will be reflect the same.
copy() --> same values with different memory location.
			independent each other.


>>> from numpy import *
>>>
>>> arr1 = array([1,2,3,4,5])
>>> arr1
array([1, 2, 3, 4, 5])
>>> arr2 = arr1
>>> arr2
array([1, 2, 3, 4, 5])
>>> id(arr1)
41405680
>>> id(arr2)
41405680
>>> arr1[0] = 10
>>> arr1
array([10,  2,  3,  4,  5])
>>> arr2
array([10,  2,  3,  4,  5])


>>> arr3 = arr1.view()
>>> arr1
array([10,  2,  3,  4,  5])
>>> arr3
array([10,  2,  3,  4,  5])
>>> arr1[1] = 20
>>> arr1
array([10, 20,  3,  4,  5])
>>> arr3
array([10, 20,  3,  4,  5])
>>> id(arr1)
41405680
>>> id(arr3)
41407776


>>> arr4 = arr1.copy()
>>> arr1
array([10, 20,  3,  4,  5])
>>> arr4
array([10, 20,  3,  4,  5])
>>> arr1[2] = 30
>>> arr1
array([10, 20, 30,  4,  5])
>>> arr4
array([10, 20,  3,  4,  5])
>>>
Slicing and indexing in Numpy arrays:
------------------------------------


from numpy import * 

a = arange(10,16)

print(a)

b = a[1:6:2]
print(b)

b = a[-2:2:-1]
print(b)

b = a[:-2:]
print(b)

output:
------
[10 11 12 13 14 15]
[11 13 15]
[14 13]
[10 11 12 13]




Dimensions of array: 
--------------------

1 Dimension : When array contains only one row or one column.


>>> a = array([1,2,3,4])
>>> a
array([1, 2, 3, 4])

>>> b = array([10,
...                     20,
...                     30,
...                     40
...                     ])
>>> b
array([10, 20, 30, 40])
>>>

2 Dimension : Array contains more than one row and one column.
			 combination of several 1D arrays.
		  
>>> arr2 = array([[10,20,30],
...                       [20,30,40]])
>>> arr2
array([[10, 20, 30],
       [20, 30, 40]])
	   
It is 2D array with 2 rows and 3 columns.
	   
3 Dimension : combination of 2D arrays.

>>> arr4 = array([[[10,20],[30,40]], [[40,50],[50,60]] ])

>>> print(arr4)
[[[10 20]
  [30 40]]

 [[40 50]
  [50 60]]]


  
Attributes of array:
-------------------
1. ndim attribute
2. shape attribute
3. size attribute
4. itemsize attribute
5. dtype attribute
6. nbytes attribute

ndim attribute : represents no.of dimensions or axes of the array.

>>> arr4.ndim
3

shape attribute : Share attribute gives the shape of an array. The shape is 
a tuple listing number of elements along each dimension. 
1D--> shape represents no.of elements.
2D -->  no.of rows or columns of each



>>> arr1= array([1,2,3,4,5])
>>> print(arr1.shape)
(5,)

>>> arr2= array([[1,2,3],[4,5,6]])
>>> arr2.shape
(2, 3)


size attribute : Size attribute gives total number of elements in array.

>>> arr1 = array([1,2,3,4])
>>> arr1.size
4
>>> arr2 = array ([[1,2,3],[4,5,6]])
>>> arr2.size
6


itemsize attribute: Item size attribute gives memory size of array element in bytes.
					1 byte = 8 bits.
		

>>> arr2 = array ([1,2,3,4,5])
>>> arr2.itemsize
4
>>> arr2 = array ([1.8,2.4,3.5,4.7,5.1])
>>> arr2.itemsize
8

dtype attribute : represents data type of elements in array.

>>> arr2 = array ([1,2,3,4,5])
>>> arr2.dtype
dtype('int32')
>>> arr2 = array ([1.8,2.4,3.5,4.7,5.1])
>>> arr2.dtype
dtype('float64')
>>>

nbytes attribute : total number of bytes occupied by array

>>> arr2
array([1.8, 2.4, 3.5, 4.7, 5.1])
>>> arr2.nbytes
40
>>> arr1 = array ([1,2,3,4,5])
>>> arr1.nbytes
20

The reshape method():
-------------------

The reshape() is used to change the shape of array. The new array should have
same elements of original array.

arr1 = arange(10)
print(arr1)

>>> arr1 = arange(10)
>>> arr1
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> arr2 = arr1.reshape(2,5)
>>> arr2
array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])
>>> arr3 = arr1.reshape(5,2)
>>> arr3
array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7],
       [8, 9]])
>>> arr4 = arr1.reshape(4,3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: cannot reshape array of size 10 into shape (4,3)


The flatten() method : 
-----------------------

The flatten() is used to return a copy of array collapsed into one dimension.

>>>
>>> arr1 = array([[1,2,3,4],[4,5,6,7]])
>>> print(arr1.flatten())
[1 2 3 4 4 5 6 7]

Working with multi dimensional arrays : 
-----------------------------------

2D arrays,3D arrays etc. are called multi dimensional arrays. 
we can create multi dimensional arrays in the following ways. 

1. using array() function
2. Using ones() and zeros() function
3. Using eye() function
4. Using reshape() function

The array() function:
---------------------
>>> arr_1D = array([1,2,3,4])
>>> arr_1D.ndim
1
>>> arr_2D = array([[1,2,3,4],[3,4,5,6]])
>>> arr_2D.ndim
2
>>> arr_3D = array([[[1,2],[3,4]],[[3,4],[5,6]]])
>>> arr_3D.ndim
3

ones , zeros functions : 
---------------------
ones((r,c),dtype)

>>> arr_1 = ones((4,3),int)
>>> arr_1
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1],
       [1, 1, 1]])
>>> arr_1 = ones((4,3),float)
>>> arr_1
array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
	   
zeros((r,c),dtype)	 
>>> arr_0 = zeros((4,3),int)
>>> arr_0
array([[0, 0, 0],
       [0, 0, 0],
       [0, 0, 0],
       [0, 0, 0]])
>>> arr_0 = zeros((4,3),float)
>>> arr_0
array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])
>>>

eye() function : eye() creates a 2D array and fills the elements in 
---------------
the diagonal with 1's. The general format of using that function is

eye(n,dtype=datatype)

the default datatype is false

>>> arr_e = eye(3,dtype=int)
>>> arr_e = eye(3)
>>> arr_e
array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
>>> arr_e = eye(3,dtype=int)
>>> arr_e
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1]])
	   
reshape() Function : 
------------------

As we discussed it will convert 1D to multi dimensional arrays. The syntax is as below.

reshape(arryname,(n,r,c))

>>> a= array([1,2,3,4,5,6,7,8])
>>> b = reshape(a,(2,4))
>>> b
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
>>> b = reshape(a,(4,2))
>>> b
array([[1, 2],
       [3, 4],
       [5, 6],
       [7, 8]])
	   
>>> a= array([1,2,3,4,5,6,7,8,9,10,11,12])
>>> b=a.reshape(3,4)
>>> b
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
>>> b = a.reshape(4,3)
>>>
>>> b
array([[ 1,  2,  3],
       [ 4,  5,  6],
       [ 7,  8,  9],
       [10, 11, 12]])
		
Indexing Multi dimensional array:
--------------------------------

from numpy import *

a = array([[1,2,3],[4,5,6],[7,8,9]])

for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i][j],end=',')

output : 
1,2,3,4,5,6,7,8,9,

Multi Dimension slicing : 
-------------------------

from numpy import *

arr1 = reshape(arange(10,35),(5,5))
print(arr1)

output : 
------
[[10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]
 [25 26 27 28 29]
 [30 31 32 33 34]]
 
arr1[0:2,1:3]

array([[11, 12],
       [16, 17]])
	   
arr1[2:5,2:5]

array([[22, 23, 24],
       [27, 28, 29],
       [32, 33, 34]])



Matrices in numpy : 
--------------------
In mathematics, matrices are represents a rectangular array of elements 
arranged in rows and columns.

If matrix has only one row it is called row matrix. if it has only 1 column it 
is called as column matrix. Row and column matrix are nothing but 1D array.

When a matrix has more than 1 row and 1 column then it is called m x n matrix. 
where m is no.of rows and n is no.of columns.

using 'matrix' keyword directly we can convert array to matrix.

a = array([[1,2,3],[4,5,6]])
print(a)
print(type(a))
b = matrix(a)
print(type(b))

Using 'matrix' directly we can create matrix.
a = matrix([[1,2,3],[4,5,6]])
type(a)


str = '1 2;3 4;5 6'
b = matrix(str)
print(b)

output: 

[[1 2]
 [3 4]
 [5 6]]
 
c = matrix("1 3;3 5;6 7")
print(c)

output:

[[1 3]
 [3 5]
 [6 7]]

To get diagonal elements of matrix : 
-------------------------------------

c = matrix("1 3 6;3 5 7;6 7 8")
print(c)

b = diagonal(c)
print(b)

output : 

[[1 3 6]
 [3 5 7]
 [6 7 8]]
 
[1 5 8]


max(),min(),sum(),mean():
------------------------

a = matrix([[1,2,3],[4,5,6],[7,8,9]])
print(a)
print("max element in a is",a.max())
print("min element in a is",a.min())
print("sum of elements in a is",a.sum())
print("mean of a is",a.mean())

output : 
[[1 2 3]
 [4 5 6]
 [7 8 9]]
max element in a is 9
min element in a is 1
sum of elements in a is 45
mean of a is 5.0

product of elments
----------------

prod(0): product of elements in columns level
prod(1): product of elements in row level.

>>> a = matrix(arange(12).reshape(3,4))
>>> a
matrix([[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]])
>>> a.prod(0)
matrix([[  0,  45, 120, 231]])
>>> a.prod(1)
matrix([[   0],
        [ 840],
        [7920]])

sorting of matrices: 
----------------
sort(matrixname,axis)
axis --> 1 row level sort ascending order
axis --> 0 column level sort ascending order

default axis 1

>>> a = matrix([[3,2,4],[2,1,3]])
>>> b = sort(a)
>>> b
matrix([[2, 3, 4],
        [1, 2, 3]])
>>> a
matrix([[3, 2, 4],
        [2, 1, 3]])
>>> c = sort(a,axis =0)
>>> c
matrix([[2, 1, 3],
        [3, 2, 4]])

sort decending order 

>>> a
matrix([[3, 2, 4],
        [2, 1, 3]])
>>> b= -sort(-a)
>>> b
matrix([[4, 3, 2],
        [3, 2, 1]])

>>> a = matrix([[3,1,4],[2
>>>
>>>
>>> a
matrix([[3, 1, 4],
        [2, 2, 3]])
>>> b = sort(a,axis=0)
>>> b
matrix([[2, 1, 3],
        [3, 2, 4]])
>>> c = -sort(-a,axis=0)
>>> c
matrix([[3, 2, 4],
        [2, 1, 3]])

Transpose of matrix : 
---------------------
Rewriting matrix rows into columns and vice versa is called 'transpose'.
we can use transpose() or getT()

>>> a = matrix("1 2 3;4 5 6 ; 7 8 9")
>>> a
matrix([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
>>> b = a.transpose()
>>> b
matrix([[1, 4, 7],
        [2, 5, 8],
        [3, 6, 9]])
>>> c = a.getT()
>>> c
matrix([[1, 4, 7],
        [2, 5, 8],
        [3, 6, 9]])

write a program to enter matrix elements from keyboard and do trasspose.
		
from numpy import * 


r = int(input("Enter no.of rows"))
c = int(input("Enter no.of columns"))
str = input("enter the elements in , separator")
mat = matrix(str)

res_matrix = reshape(mat,(r,c))

print("matrix is \n",res_matrix)

tran_matrix = res_matrix.getT()

print("Transpose of matrix is \n",tran_matrix)

Matrix add,sub,div:
--------------------

>>> a = matrix(" 1 2; 2 3")
>>> a
matrix([[1, 2],
        [2, 3]])
>>> b = matrix("2 4 ; 4 5")
>>> b
matrix([[2, 4],
        [4, 5]])

>>> a
matrix([[1, 2],
        [2, 3]])
>>> b
matrix([[2, 4],
        [4, 5]])
>>> add = a+b
>>> add
matrix([[3, 6],
        [6, 8]])
>>> sub = b-a
>>> sub
matrix([[1, 2],
        [2, 2]])
>>> div = b/a
>>> div
matrix([[2.        , 2.        ],
        [2.        , 1.66666667]])


Matrix multiplication 
-------------------

a = m x n matrix 
b = n x p matrix 

no.of columns of a should be equal to no.of rows of b

result --> m x p matrix

>>> a = matrix(" 1 2; 2 3")
>>> a
matrix([[1, 2],
        [2, 3]])
>>> b = matrix("2 4 ; 4 5")
>>> b
matrix([[2, 4],
        [4, 5]])
		
		
>>> c = a * b
>>> c
matrix([[10, 14],
        [16, 23]])


Write a python program to accept two matrices and find product.

import sys

from numpy import * 

r1,c1=[int(a) for a in input("First matrix rows and cols :").split()]
r2,c2=[int(a) for a in input("First matrix rows and cols :").split()]


import sys

from numpy import * 

r1,c1=[int(a) for a in input("First matrix rows and cols :").split()]
r2,c2=[int(a) for a in input("Second matrix rows and cols :").split()]

if c1!=r2:
	print("multiplication is not possible")
	sys.exit()

str1 = input("enter first elements of matrix\n")
x= reshape(matrix(str1),(r1,c1))
print(x)

str2 = input("enter first elements of matrix\n")
y= reshape(matrix(str2),(r2,c2))
print(x)

mul = x * y
print("multiplication of two matrices is \n",mul)


